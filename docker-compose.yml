
# # version: '3.8'

# # services:
# #   backend:
# #     build:
# #       context: ./
# #       dockerfile: Dockerfile 
# #       # commmand: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
# #     ports:
# #       - "8000:8000"
# #     volumes:
# #       - .:/app
# #     depends_on:
# #       - db
# #     environment:
# #       - DB_ENGINE=django.contrib.gis.db.backends.postgis
# #       - DB_NAME=postgres
# #       - DB_USER=postgres.jttnxyapemrmtscvcpaa
# #       - DB_PASSWORD=@Akhil@9848
# #       - DB_HOST=db  # Referring to the db service within the Docker network
# #       - DB_PORT=5432  # Postgres default port
# #     command: >
# #       sh -c "python manage.py migrate && 
# #              python manage.py runserver 0.0.0.0:8000"
  
# #   queue:
# #     build:
# #       context: ./
# #       dockerfile: Dockerfile
# #     command: 'python consumer.py'
# #     depends_on:
# #       - db
# #   db:
# #     image: postgres
# #     restart: always
# #     ports:
# #       - "6543:5432"  # Mapping host port 6543 to container's Postgres port 5432
# #     volumes:
# #       - postgres-data:/var/lib/postgresql/data
# #     environment:
# #       - POSTGRES_DB=postgres
# #       - POSTGRES_USER=postgres.jttnxyapemrmtscvcpaa
# #       - POSTGRES_PASSWORD=@Akhil@9848



# # volumes:
# #   postgres-data:
# # version: '3.8'

# services:
#   backend:
#     build:
#       context: ./
#       dockerfile: Dockerfile 
#     ports:
#       - "8000:8000"
#     volumes:
#       - .:/app
#     depends_on:
#       - db
#     environment:
#       - DB_ENGINE=django.contrib.gis.db.backends.postgis
#       - DB_NAME=postgres
#       - DB_USER=postgres.jttnxyapemrmtscvcpaa
#       - DB_PASSWORD=@Akhil@9848
#       - DB_HOST=db  # Referring to the db service within the Docker network
#       - DB_PORT=5432  # Postgres default port
#     command: >
#       sh -c "python manage.py migrate &&
#              python manage.py runserver 0.0.0.0:8000"
  
#   # queue:
#   #   build:
#   #     context: ./
#   #     dockerfile: Dockerfile
#   #   command: 'python consumer.py'
#   #   depends_on:
#   #     - db
#   #     - backend  # Ensure queue waits for the backend to be ready
#   #   volumes:
#   #     - .:/app  # Ensures the consumer has access to the code and environment
#   #   environment:
#   #     - DB_ENGINE=django.contrib.gis.db.backends.postgis
#   #     - DB_NAME=postgres
#   #     - DB_USER=postgres.jttnxyapemrmtscvcpaa
#   #     - DB_PASSWORD=@Akhil@9848
#   #     - DB_HOST=db
#   #     - DB_PORT=5432
  
#   db:
#     image: postgres
#     restart: always
#     ports:
#       - "6543:5432"  # Mapping host port 6543 to container's Postgres port 5432
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=postgres
#       - POSTGRES_USER=postgres.jttnxyapemrmtscvcpaa
#       - POSTGRES_PASSWORD=@Akhil@9848

# volumes:
#   postgres-data:



# services:
#   backend:
#     build:
#       context: ./
#       dockerfile: Dockerfile 
#     ports:
#       - "8000:8000"
#     volumes:
#       - .:/app
    
#     command: >
#       sh -c "python manage.py migrate &&
#              python manage.py runserver 0.0.0.0:8000"
  
  

version: "3.8"

services:
  backend:
    build:
      context: ./
      dockerfile: Dockerfile 
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - neo4j
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=your_password
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  neo4j:
    image: neo4j:5
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/your_password
    volumes:
      - neo4j_data:/data

volumes:
  neo4j_data:
